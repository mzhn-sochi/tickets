// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package app

import (
	"fmt"
	"github.com/jmoiron/sqlx"
	"log"
	"tickets/internal/broker"
	"tickets/internal/config"
	"tickets/internal/events"
	"tickets/internal/server"
	"tickets/internal/service/ticket-service"
	"tickets/internal/storage/pg"
)

import (
	_ "github.com/lib/pq"
)

// Injectors from wire.go:

func Init() (*App, func(), error) {
	configConfig := config.New()
	db, cleanup, err := initDB(configConfig)
	if err != nil {
		return nil, nil, err
	}
	ticketStorage := pg.NewTicketStorage(db)
	statusHandler := events.NewStatusHandler(ticketStorage)
	errorHandler := events.NewErrorHandler(ticketStorage)
	messageBroker, cleanup2, err := initBroker(configConfig, statusHandler, errorHandler)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	ticketService := ticketservice.New(ticketStorage, messageBroker, configConfig)
	serverServer := server.New(ticketService)
	app := newApp(configConfig, serverServer, messageBroker)
	return app, func() {
		cleanup2()
		cleanup()
	}, nil
}

// wire.go:

func initDB(cfg *config.Config) (*sqlx.DB, func(), error) {

	host := cfg.DB.Host
	port := cfg.DB.Port
	user := cfg.DB.User
	pass := cfg.DB.Pass
	name := cfg.DB.Name

	cs := fmt.Sprintf("postgres://%s:%s@%s:%d/%s?sslmode=disable", user, pass, host, port, name)
	log.Printf("connecting to %s\n", cs)

	db, err := sqlx.Open("postgres", cs)
	if err != nil {
		return nil, nil, err
	}
	if err := db.Ping(); err != nil {
		return nil, func() {
			db.Close()
		}, err
	}

	return db, func() { db.Close() }, nil
}

func initBroker(cfg *config.Config,
	statusHandler events.StatusHandler,
	errorsHandler events.ErrorHandler) (broker.MessageBroker, func(), error) {
	mb, err := broker.New(cfg)
	if err != nil {
		return nil, nil, err
	}

	go func() {
		if err := mb.Consume(statusHandler.Handle, errorsHandler.Handle); err != nil {
			log.Println(err)
			return
		}
	}()

	return mb, func() {
		mb.Close()
	}, nil
}
